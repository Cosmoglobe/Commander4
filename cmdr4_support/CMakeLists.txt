cmake_minimum_required(VERSION 3.15...3.27)
project(${SKBUILD_PROJECT_NAME} LANGUAGES CXX)

if(DEFINED ENV{CMDR4_OPTIMIZATION})
    set (OPTFLAGS "$ENV{CMDR4_OPTIMIZATION}")
else()
    set (OPTFLAGS "native-strip")
endif()

set(PKGNAME ${SKBUILD_PROJECT_NAME})
set(PKGVERSION ${SKBUILD_PROJECT_VERSION})

find_package(Python 3.8 REQUIRED COMPONENTS Interpreter Development.Module)

set(CXX_SOURCES
    cmdr4_support.cc
    ../external/ducc0/src/ducc0/infra/string_utils.cc
    ../external/ducc0/src/ducc0/infra/threading.cc
)

if (DEFINED ENV{CMDR4_USE_NANOBIND})
    execute_process(
            COMMAND "${Python_EXECUTABLE}" -m nanobind --cmake_dir
            OUTPUT_STRIP_TRAILING_WHITESPACE
            OUTPUT_VARIABLE NB_DIR)
    list(APPEND CMAKE_PREFIX_PATH "${NB_DIR}")
    find_package(nanobind CONFIG REQUIRED)
    nanobind_add_module(cmdr4_support NOSTRIP NB_SUPPRESS_WARNINGS NOMINSIZE ${PYMOD_SOURCES} ${CXX_SOURCES})
    target_compile_definitions(cmdr4_support PRIVATE CMDR4_USE_NANOBIND)
else()
    find_package(pybind11 REQUIRED)
    pybind11_add_module(cmdr4_support NO_EXTRAS ${PYMOD_SOURCES} ${CXX_SOURCES})
endif()

target_compile_definitions(cmdr4_support PRIVATE PKGNAME=${PKGNAME} PKGVERSION=${PKGVERSION})

if (NOT MSVC)
    if (CMAKE_SYSTEM_PROCESSOR MATCHES "ppc|ppc64|powerpc|powerpc64" OR (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "ppc|ppc64"))
        # PowerPC arch does not have -march flag.
        set(CMDR4_ARCH_FLAGS "-mtune=native" CACHE STRING "Compiler flags for specifying target architecture.")
    elseif (CMAKE_SYSTEM_NAME MATCHES "Emscripten")
        set(CMDR4_ARCH_FLAGS "" CACHE STRING "Compiler flags for specifying target architecture.")
    else ()
        set(CMDR4_ARCH_FLAGS "-march=native" CACHE STRING "Compiler flags for specifying target architecture.")
    endif ()
    message(STATUS "Using GCC/Clang flags: ${CMDR4_ARCH_FLAGS}")
else ()
    # Check for AVX, AVX512 and SSE support
    message(STATUS "Checking for AVX, AVX512 and SSE support")
    try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR
            ${CMAKE_BINARY_DIR}
            ${CMAKE_CURRENT_SOURCE_DIR}/cmake/CheckAVX.cpp
            COMPILE_OUTPUT_VARIABLE COMPILE_OUTPUT
            RUN_OUTPUT_VARIABLE RUN_OUTPUT)
    if (RUN_OUTPUT MATCHES "AVX512")
        set(CMDR4_ARCH_FLAGS "/arch:AVX512" CACHE STRING "Compiler flags for specifying target architecture.")
    elseif (RUN_OUTPUT MATCHES "AVX")
        set(CMDR4_ARCH_FLAGS "/arch:AVX" CACHE STRING "Compiler flags for specifying target architecture.")
    elseif (RUN_OUTPUT MATCHES "SSE")
        set(CMDR4_ARCH_FLAGS "/arch:SSE" CACHE STRING "Compiler flags for specifying target architecture.")
    else ()
        set(CMDR4_ARCH_FLAGS "" CACHE STRING "Compiler flags for specifying target architecture.")
    endif ()
    message(STATUS "CPU supports: ${RUN_OUTPUT}")
    message(STATUS "Using MSVC flags: ${CMDR4_ARCH_FLAGS}")
endif ()

include_directories(${CMAKE_SOURCE_DIR}/../external/ducc0/src/)

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    SET(CMDR4_WARN_FLAGS
        -Wfatal-errors -Wfloat-conversion -W -Wall -Wstrict-aliasing
        -Wwrite-strings -Wredundant-decls -Woverloaded-virtual -Wcast-qual
        -Wcast-align -Wpointer-arith -Wnon-virtual-dtor
        -Wzero-as-null-pointer-constant)
#    set (CMDR4_OPT_FLAGS -O3 -ffp-contract=fast -fexcess-precision=fast -fno-math-errno -fno-signed-zeros -fno-trapping-math -fassociative-math -freciprocal-math)
    # we can use -ffast-math here because the flags will not be used for linking
    set (CMDR4_OPT_FLAGS -O3 -ffast-math)
    set (CMDR4_NOOPT_FLAGS -O0)
    set (CMDR4_DEBUG_FLAGS -g)
    set (CMDR4_STRIP_FLAGS -s)
endif()
target_compile_options(cmdr4_support PRIVATE ${CMDR4_WARN_FLAGS})

if (OPTFLAGS MATCHES "^native")
  target_compile_options(cmdr4_support PRIVATE ${CMDR4_ARCH_FLAGS})
endif()
if (OPTFLAGS MATCHES "-debug$")
  target_compile_options(cmdr4_support PRIVATE ${CMDR4_DEBUG_FLAGS})
elseif (OPTFLAGS MATCHES "-strip$")
  target_link_options(cmdr4_support PRIVATE ${CMDR4_STRIP_FLAGS})
endif()
if (OPTFLAGS MATCHES "^none")
  target_compile_options(cmdr4_support PRIVATE ${CMDR4_NOOPT_FLAGS})
else()
  target_compile_options(cmdr4_support PRIVATE ${CMDR4_OPT_FLAGS})
endif()

find_package(Threads REQUIRED)
target_link_libraries(cmdr4_support PRIVATE Threads::Threads)

if(DEFINED ENV{CMDR4_CFLAGS})
    separate_arguments(CFLAGS_TMP NATIVE_COMMAND "$ENV{CMDR4_CFLAGS}")
    target_compile_options(cmdr4_support PRIVATE ${CFLAGS_TMP})
endif()
if(DEFINED ENV{CMDR4_LFLAGS})
    separate_arguments(LFLAGS_TMP NATIVE_COMMAND "$ENV{CMDR4_LFLAGS}")
    target_link_options(cmdr4_support PRIVATE ${LFLAGS_TMP})
endif()
if(DEFINED ENV{CMDR4_FLAGS})
    separate_arguments(FLAGS_TMP NATIVE_COMMAND "$ENV{CMDR4_FLAGS}")
    target_compile_options(cmdr4_support PRIVATE ${FLAGS_TMP})
    target_link_options(cmdr4_support PRIVATE ${FLAGS_TMP})
endif()

target_compile_features(cmdr4_support PRIVATE cxx_std_17)

set_property(TARGET cmdr4_support PROPERTY INTERPROCEDURAL_OPTIMIZATION True)

install(TARGETS cmdr4_support LIBRARY DESTINATION .)
